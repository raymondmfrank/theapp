# Voicemail Marketplace — Payments Ready

Modern, secure credit-card checkout using **Stripe Checkout** (Apple Pay & Google Pay supported). Swappable payment layer via `PAYMENT_PROVIDER` env.

## Why Stripe by default?
- PCI handled by Stripe (you never touch card data)
- Apple Pay & Google Pay work automatically on supported devices
- Links, cards, promo codes — super clean UX

You can later swap to PayPal or Square by adding adapters in `lib/payments/`.

## Quickstart

```bash
pnpm i  # or npm i / yarn
cp .env.example .env.local
npx prisma migrate dev --name init
pnpm seed
pnpm dev
```
Open http://localhost:3000

### Env
- `PAYMENT_PROVIDER=stripe`
- `STRIPE_SECRET_KEY`, `STRIPE_WEBHOOK_SECRET`
- `NEXT_PUBLIC_SITE_URL`
- S3 creds for downloads

### Webhook (dev)
```bash
stripe login
stripe listen --forward-to localhost:3000/api/stripe/webhook
```

### Add your audio
Use Prisma Studio:
```bash
npx prisma studio
```
- Set `previewUrl` to a public low-bitrate MP3
- Set `fullKey` to the S3 key for the purchased file
- Set `status=PUBLISHED`

### Download security
- Purchase → webhook creates Order + 72h DownloadGrant
- `/api/download?voiceId=...&email=...` presigns a 5-min S3 URL

### Switching providers
- Keep `PAYMENT_PROVIDER=stripe` for fastest launch
- To add PayPal or Square, implement an adapter in `lib/payments/` that exports a `createCheckout()` returning a redirect URL, then set `PAYMENT_PROVIDER=paypal|square`.

---

Built on 2025-09-02.

import type { Config } from 'tailwindcss'
const config: Config = {
  content: ['./app/**/*.{ts,tsx}','./components/**/*.{ts,tsx}'],
  theme: { extend: {} },
  plugins: [],
}
export default config

{
  "compilerOptions": {
    "target": "ES2022",
    "lib": [
      "dom",
      "dom.iterable",
      "es2022"
    ],
    "allowJs": false,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "types": [
      "node"
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

# Site
NEXT_PUBLIC_SITE_URL=http://localhost:3000
NODE_ENV=development

# Admin (Basic Auth for /admin)
ADMIN_USERNAME=admin
ADMIN_PASSWORD=change-me-please

# Payment provider selection: stripe | paypal | square
PAYMENT_PROVIDER=stripe

# Stripe (default modern, secure card processor; supports Apple Pay & Google Pay via Checkout)
STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...

# PayPal (placeholder for future adapter)
PAYPAL_CLIENT_ID=
PAYPAL_CLIENT_SECRET=

# Square (placeholder for future adapter)
SQUARE_ACCESS_TOKEN=
SQUARE_LOCATION_ID=

# Database
DATABASE_URL="file:./dev.db"

# Storage
S3_ENDPOINT=https://s3.amazonaws.com
S3_REGION=us-east-1
S3_BUCKET=your-bucket
S3_ACCESS_KEY_ID=your-access-key
S3_SECRET_ACCESS_KEY=your-secret

# Email (optional for resend link)
RESEND_API_KEY=
FROM_EMAIL=

import type { NextRequest } from 'next/server'
import { NextResponse } from 'next/server'
import { env } from './lib/env'

export function middleware(req: NextRequest) {
  const res = NextResponse.next()

  const csp = [
    "default-src 'self'",
    "script-src 'self' 'unsafe-inline' https://js.stripe.com",
    "style-src 'self' 'unsafe-inline'",
    "img-src 'self' data: https:",
    "font-src 'self' data:",
    "connect-src 'self' https://api.stripe.com",
    "media-src 'self' https: data:",
    "frame-src https://js.stripe.com https://hooks.stripe.com",
    "base-uri 'self'",
    "form-action 'self' https://checkout.stripe.com"
  ].join('; ')
  res.headers.set('Content-Security-Policy', csp)
  res.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  res.headers.set('X-Content-Type-Options', 'nosniff')
  res.headers.set('X-Frame-Options', 'DENY')
  res.headers.set('X-XSS-Protection', '0')
  res.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=(), interest-cohort=()')

  if (req.nextUrl.pathname.startsWith('/admin')) {
    const auth = req.headers.get('authorization')
    if (!auth?.startsWith('Basic ')) {
      return new NextResponse('Auth required', {
        status: 401,
        headers: { 'WWW-Authenticate': 'Basic realm="Admin"' }
      })
    }
    const [u, p] = Buffer.from(auth.slice(6), 'base64').toString().split(':')
    if (u !== env.ADMIN_USERNAME || p !== env.ADMIN_PASSWORD) {
      return new NextResponse('Forbidden', { status: 403 })
    }
  }

  return res
}

export const config = {
  matcher: ['/((?!_next/static|_next/image|favicon.ico|robots.txt|sitemap.xml).*)']
}

/** @type {import('next').NextConfig} */
const nextConfig = {
  poweredByHeader: false,
  reactStrictMode: true,
  images: { remotePatterns: [{ protocol: 'https', hostname: '**' }] },
  headers: async () => ([
    {
      source: '/(.*)',
      headers: [
        { key: 'Referrer-Policy', value: 'strict-origin-when-cross-origin' },
        { key: 'X-Content-Type-Options', value: 'nosniff' },
        { key: 'X-Frame-Options', value: 'DENY' },
        { key: 'X-XSS-Protection', value: '0' },
        { key: 'Permissions-Policy', value: 'camera=(), microphone=(), geolocation=(), interest-cohort=()' },
      ],
    },
  ]),
}
export default nextConfig

/// <reference types="next" />
/// <reference types="next/image-types/global" />

{
  "name": "voicemail-marketplace-starter-pay",
  "version": "0.3.0",
  "private": true,
  "scripts": {
    "dev": "next dev -p 3000",
    "build": "prisma generate && next build",
    "start": "next start -p 3000",
    "postinstall": "prisma generate",
    "seed": "tsx prisma/seed.ts",
    "lint": "next lint"
  },
  "dependencies": {
    "@aws-sdk/client-s3": "^3.624.0",
    "@aws-sdk/s3-request-presigner": "^3.624.0",
    "@prisma/client": "^5.18.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.453.0",
    "next": "14.2.5",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "stripe": "^16.0.0",
    "zod": "^3.23.8",
    "@vercel/analytics": "^1.3.1"
  },
  "devDependencies": {
    "@types/node": "^20.12.12",
    "@types/react": "^18.2.79",
    "@types/react-dom": "^18.2.25",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.41",
    "prisma": "^5.18.0",
    "tailwindcss": "^3.4.10",
    "ts-node": "^10.9.2",
    "tsx": "^4.19.1",
    "typescript": "^5.5.4",
    "eslint": "^8.57.0",
    "eslint-config-next": "14.2.5"
  }
}

module.exports = { plugins: { tailwindcss: {}, autoprefixer: {} } }
